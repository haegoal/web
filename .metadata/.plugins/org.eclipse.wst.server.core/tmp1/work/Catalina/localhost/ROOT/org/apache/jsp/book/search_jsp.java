/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-27 06:36:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	#div_book img {\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<div class=\"row my-5\">\r\n");
      out.write("	<div class=\"col\">\r\n");
      out.write("		<h1 class=\"text-center mb-5\">도서검색</h1>\r\n");
      out.write("		<div class=\"row mb-3\">\r\n");
      out.write("			<form name=\"frm\" class=\"col-6 col-md-4 col-lg-3\">\r\n");
      out.write("				<div class=\"input-group\">\r\n");
      out.write("					<input class=\"form-control\" value=\"깜냥\" name=\"query\">\r\n");
      out.write("					<button class=\"btn btn-primary\">검색</button>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<div id=\"div_book\"></div>\r\n");
      out.write("		<div class=\"text-center\">\r\n");
      out.write("			<button class=\"btn btn-primary\" id=\"prev\">이전</button>\r\n");
      out.write("			<span class=\"mx-3\" id=\"page\">1/10</span>\r\n");
      out.write("			<button class=\"btn btn-primary\" id=\"next\">다음</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 도서목록 템플릿 -->\r\n");
      out.write("<script id=\"temp_book\" type=\"text/x-handlebars-template\">\r\n");
      out.write("	<table class=\"table\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=5>\r\n");
      out.write("				<input type=\"checkbox\" id=\"all\" class=\"me-3\">\r\n");
      out.write("				<button class=\"btn btn-primary btn-sm\" id=\"btn-save\">선택한항목 저장</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		{{#each documents}}\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td><input type=\"checkbox\" class=\"chk\" book=\"{{toString @this}}\"></td>\r\n");
      out.write("			<td><img src=\"{{printImage thumbnail}}\" width=\"50px\" index=\"{{@index}}\"></td>\r\n");
      out.write("			<td>{{title}}</td>\r\n");
      out.write("			<td>{{fmtPrice price}}</td>\r\n");
      out.write("			<td>{{authors}}</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("<!-- Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"modal{{@index}}\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog modal-lg\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">도서정보</h1>\r\n");
      out.write("        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("			<div class=\"col-4 card p-3 me-3\">\r\n");
      out.write("				<img src=\"{{printImage thumbnail}}\">\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"col card p-3 me-3\">\r\n");
      out.write("				<h5>제목: {{title}}</h5>\r\n");
      out.write("				<h5>가격: {{fmtPrice price}}</h5>\r\n");
      out.write("				<h5>출판사: {{publisher}}</h5>\r\n");
      out.write("				<h5>저자: {{authors}}</h5>\r\n");
      out.write("				<h5><a href=\"{{url}}\">사이트이동</a></h5>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr>\r\n");
      out.write("		<div>\r\n");
      out.write("			<p class=\"card p-3\">{{contents}}</p>\r\n");
      out.write("		</div>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("		{{/each}}\r\n");
      out.write("	</table>\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("	Handlebars.registerHelper(\"fmtPrice\", function(price){\r\n");
      out.write("		return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \"원\"\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	Handlebars.registerHelper(\"printImage\", function(image){\r\n");
      out.write("		if(image) return image;\r\n");
      out.write("		else return \"http://via.placeholder.com/120x174\";\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	Handlebars.registerHelper(\"toString\", function(book){\r\n");
      out.write("		return JSON.stringify(book);\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("	let page=1;\r\n");
      out.write("	let query=$(frm.query).val();\r\n");
      out.write("	getList();\r\n");
      out.write("	\r\n");
      out.write("	//선택 저장버튼을 클릭한 경우\r\n");
      out.write("	$(\"#div_book\").on(\"click\", \"#btn-save\", function(){\r\n");
      out.write("		const chk=$(\"#div_book .chk:checked\").length;\r\n");
      out.write("		if(chk==0){\r\n");
      out.write("			alert(\"저장할 항목을 선택하세요!\");\r\n");
      out.write("		}else{\r\n");
      out.write("			if(confirm(\"선택한 항목을 저장하실래요?\")) {\r\n");
      out.write("				//선택한 항목 저장\r\n");
      out.write("				$(\"#div_book .chk:checked\").each(function(){\r\n");
      out.write("					const book=JSON.parse($(this).attr(\"book\"));\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						type:\"post\",\r\n");
      out.write("						url:\"/book/insert\",\r\n");
      out.write("						data:book,\r\n");
      out.write("						success:function(){}\r\n");
      out.write("					});\r\n");
      out.write("				});\r\n");
      out.write("				alert(\"저장이 완료되었습니다.\");\r\n");
      out.write("			}else{\r\n");
      out.write("				alert(\"저장이 취소되었습니다.\")\r\n");
      out.write("			}\r\n");
      out.write("			$(\"#div_book .chk\").prop(\"checked\", false);\r\n");
      out.write("			$(\"#div_book #all\").prop(\"checked\", false);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//전체 체크박스를 클릭한 경우\r\n");
      out.write("	$(\"#div_book\").on(\"click\", \"#all\", function(){\r\n");
      out.write("		if($(this).is(\":checked\")){\r\n");
      out.write("			$(\"#div_book .chk\").prop(\"checked\", true);\r\n");
      out.write("		}else{\r\n");
      out.write("			$(\"#div_book .chk\").prop(\"checked\", false);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//각행의 체크박스를 클릭한 경우\r\n");
      out.write("	$(\"#div_book\").on(\"click\", \".chk\", function(){\r\n");
      out.write("		const all=$(\"#div_book .chk\").length;\r\n");
      out.write("		const chk=$(\"#div_book .chk:checked\").length;\r\n");
      out.write("		if(all==chk){\r\n");
      out.write("			$(\"#div_book #all\").prop(\"checked\", true);\r\n");
      out.write("		}else{\r\n");
      out.write("			$(\"#div_book #all\").prop(\"checked\", false);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//각행의 이미지를 클릭한 경우\r\n");
      out.write("	$(\"#div_book\").on(\"click\", \"img\", function(){\r\n");
      out.write("		const index=$(this).attr(\"index\");\r\n");
      out.write("		$(\"#modal\" + index).modal(\"show\");\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(frm).on(\"submit\", function(e){\r\n");
      out.write("		e.preventDefault();\r\n");
      out.write("		page=1;\r\n");
      out.write("		query=$(frm.query).val();\r\n");
      out.write("		getList();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#next\").on(\"click\", function(){\r\n");
      out.write("		page++;\r\n");
      out.write("		getList();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#prev\").on(\"click\", function(){\r\n");
      out.write("		page--;\r\n");
      out.write("		getList();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	function getList() {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type:\"get\",\r\n");
      out.write("			url:\"https://dapi.kakao.com/v3/search/book?target=title\",\r\n");
      out.write("			data:{query:query, size:3, page:page},\r\n");
      out.write("			headers:{\"Authorization\":\"KakaoAK b80880fbde422de3fd9b4a4e67c9bb54\"},\r\n");
      out.write("			dataType:\"json\",\r\n");
      out.write("			success:function(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				const temp=Handlebars.compile($(\"#temp_book\").html());\r\n");
      out.write("				const html=temp(data);\r\n");
      out.write("				$(\"#div_book\").html(html);\r\n");
      out.write("				\r\n");
      out.write("				let last = Math.ceil(data.meta.pageable_count/3);\r\n");
      out.write("				$(\"#page\").html(page + \"/\" + last);\r\n");
      out.write("				\r\n");
      out.write("				if(page==1) $(\"#prev\").attr(\"disabled\",true);\r\n");
      out.write("				else $(\"#prev\").attr(\"disabled\",false);\r\n");
      out.write("				\r\n");
      out.write("				if(data.meta.is_end) $(\"#next\").attr(\"disabled\",true);\r\n");
      out.write("				else $(\"#next\").attr(\"disabled\",false);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
